// <auto-generated />
using System;
using DotaApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DotaApp.Data.Migrations
{
    [DbContext(typeof(DotaAppContext))]
    [Migration("20190830162410_Teams")]
    partial class Teams
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DotaApp.Data.DbModels.Ability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AbilityName");

                    b.Property<string>("Behavior");

                    b.Property<string>("Cooldown");

                    b.Property<string>("DamageType");

                    b.Property<string>("Description");

                    b.Property<int>("HeroId");

                    b.Property<string>("Image");

                    b.Property<string>("ManaCost");

                    b.Property<string>("Pierce");

                    b.HasKey("Id");

                    b.HasIndex("HeroId");

                    b.ToTable("Abilities");
                });

            modelBuilder.Entity("DotaApp.Data.DbModels.AbilityAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AbilityId");

                    b.Property<bool>("Generated");

                    b.Property<string>("Header");

                    b.Property<string>("Key");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("AbilityId");

                    b.ToTable("AbilityAttributes");
                });

            modelBuilder.Entity("DotaApp.Data.DbModels.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommentMessage")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPending")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<int>("ItemId");

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("DotaApp.Data.DbModels.Hero", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AgilityGain");

                    b.Property<int>("AttackRange");

                    b.Property<double>("AttackRate");

                    b.Property<string>("AttackType");

                    b.Property<int>("BaseAgility");

                    b.Property<double>("BaseArmor");

                    b.Property<int>("BaseAttackMax");

                    b.Property<int>("BaseAttackMin");

                    b.Property<int>("BaseHealth");

                    b.Property<double?>("BaseHealthRegen");

                    b.Property<int>("BaseIntellect");

                    b.Property<int>("BaseMana");

                    b.Property<double>("BaseManaRegen");

                    b.Property<int>("BaseMr");

                    b.Property<int>("BaseStrength");

                    b.Property<string>("Icon");

                    b.Property<string>("Image");

                    b.Property<double>("IntellectGain");

                    b.Property<int>("Legs");

                    b.Property<int>("MoveSpeed");

                    b.Property<string>("Name");

                    b.Property<string>("PrimaryAttribute");

                    b.Property<int>("ProjectileSpeed");

                    b.Property<double>("StrengthGain");

                    b.Property<double>("TurnRate");

                    b.HasKey("Id");

                    b.ToTable("Heroes");
                });

            modelBuilder.Entity("DotaApp.Data.DbModels.HeroRole", b =>
                {
                    b.Property<int>("HeroId");

                    b.Property<int>("RoleId");

                    b.HasKey("HeroId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("HeroRole");
                });

            modelBuilder.Entity("DotaApp.Data.DbModels.IdentityRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("IdentityRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("DotaApp.Data.DbModels.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cost");

                    b.Property<string>("Image");

                    b.Property<string>("Lore");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("DotaApp.Data.DbModels.ItemAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Footer");

                    b.Property<string>("Header");

                    b.Property<int>("ItemId");

                    b.Property<string>("Key");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemAttributes");
                });

            modelBuilder.Entity("DotaApp.Data.DbModels.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DotaApp.Data.DbModels.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LastMatchTime");

                    b.Property<string>("LogoUrl")
                        .IsRequired();

                    b.Property<int>("Losses");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<double>("Rating");

                    b.Property<int>("Wins");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("DotaApp.Data.DbModels.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired();

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired();

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@dota.app",
                            FirstName = "Admin",
                            LastName = "Admin",
                            PasswordHash = new byte[] { 208, 31, 32, 152, 95, 11, 61, 65, 185, 191, 116, 83, 228, 155, 194, 133, 135, 172, 194, 167, 42, 97, 15, 39, 189, 90, 248, 240, 17, 180, 212, 54, 138, 82, 204, 140, 205, 6, 168, 112, 155, 119, 228, 199, 199, 200, 244, 35, 101, 41, 128, 142, 240, 61, 119, 226, 87, 48, 173, 243, 178, 246, 146, 27 },
                            PasswordSalt = new byte[] { 66, 121, 107, 150, 101, 47, 134, 130, 148, 205, 48, 144, 74, 131, 163, 127, 203, 5, 155, 110, 178, 11, 149, 199, 141, 33, 45, 26, 49, 177, 23, 115, 242, 27, 208, 149, 18, 154, 199, 113, 123, 116, 107, 51, 71, 166, 101, 208, 42, 210, 48, 16, 173, 117, 146, 130, 208, 191, 127, 200, 86, 147, 66, 12, 166, 120, 137, 213, 123, 125, 230, 59, 57, 19, 230, 107, 43, 202, 186, 4, 219, 204, 179, 217, 184, 21, 91, 26, 5, 104, 123, 163, 89, 227, 23, 109, 23, 192, 142, 5, 59, 25, 123, 59, 73, 248, 195, 219, 91, 74, 72, 107, 132, 69, 9, 216, 186, 50, 152, 183, 211, 231, 181, 194, 44, 242, 36, 217 },
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("DotaApp.Data.DbModels.UserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("DotaApp.Data.DbModels.Ability", b =>
                {
                    b.HasOne("DotaApp.Data.DbModels.Hero", "Hero")
                        .WithMany("Abilities")
                        .HasForeignKey("HeroId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DotaApp.Data.DbModels.AbilityAttribute", b =>
                {
                    b.HasOne("DotaApp.Data.DbModels.Ability", "Ability")
                        .WithMany("AbilityAttributes")
                        .HasForeignKey("AbilityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DotaApp.Data.DbModels.Comment", b =>
                {
                    b.HasOne("DotaApp.Data.DbModels.Item", "Item")
                        .WithMany("Comments")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DotaApp.Data.DbModels.HeroRole", b =>
                {
                    b.HasOne("DotaApp.Data.DbModels.Hero", "Hero")
                        .WithMany("Roles")
                        .HasForeignKey("HeroId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DotaApp.Data.DbModels.Role", "Role")
                        .WithMany("Heroes")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DotaApp.Data.DbModels.ItemAttribute", b =>
                {
                    b.HasOne("DotaApp.Data.DbModels.Item", "Item")
                        .WithMany("ItemAttributes")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DotaApp.Data.DbModels.UserRole", b =>
                {
                    b.HasOne("DotaApp.Data.DbModels.IdentityRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DotaApp.Data.DbModels.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}

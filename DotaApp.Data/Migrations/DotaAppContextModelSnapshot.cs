// <auto-generated />
using System;
using DotaApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DotaApp.Data.Migrations
{
    [DbContext(typeof(DotaAppContext))]
    partial class DotaAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DotaApp.Data.DbModels.Ability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AbilityName");

                    b.Property<string>("Behavior");

                    b.Property<string>("Cooldown");

                    b.Property<string>("DamageType");

                    b.Property<string>("Description");

                    b.Property<int>("HeroId");

                    b.Property<string>("Image");

                    b.Property<string>("ManaCost");

                    b.Property<string>("Pierce");

                    b.HasKey("Id");

                    b.HasIndex("HeroId");

                    b.ToTable("Abilities");
                });

            modelBuilder.Entity("DotaApp.Data.DbModels.AbilityAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AbilityId");

                    b.Property<bool>("Generated");

                    b.Property<string>("Header");

                    b.Property<string>("Key");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("AbilityId");

                    b.ToTable("AbilityAttributes");
                });

            modelBuilder.Entity("DotaApp.Data.DbModels.Hero", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AgilityGain");

                    b.Property<int>("AttackRange");

                    b.Property<double>("AttackRate");

                    b.Property<string>("AttackType");

                    b.Property<int>("BaseAgility");

                    b.Property<double>("BaseArmor");

                    b.Property<int>("BaseAttackMax");

                    b.Property<int>("BaseAttackMin");

                    b.Property<int>("BaseHealth");

                    b.Property<double?>("BaseHealthRegen");

                    b.Property<int>("BaseIntellect");

                    b.Property<int>("BaseMana");

                    b.Property<double>("BaseManaRegen");

                    b.Property<int>("BaseMr");

                    b.Property<int>("BaseStrength");

                    b.Property<string>("Icon");

                    b.Property<string>("Image");

                    b.Property<double>("IntellectGain");

                    b.Property<int>("Legs");

                    b.Property<int>("MoveSpeed");

                    b.Property<string>("Name");

                    b.Property<string>("PrimaryAttribute");

                    b.Property<int>("ProjectileSpeed");

                    b.Property<double>("StrengthGain");

                    b.Property<double>("TurnRate");

                    b.HasKey("Id");

                    b.ToTable("Heroes");
                });

            modelBuilder.Entity("DotaApp.Data.DbModels.HeroRole", b =>
                {
                    b.Property<int>("HeroId");

                    b.Property<int>("RoleId");

                    b.HasKey("HeroId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("HeroRole");
                });

            modelBuilder.Entity("DotaApp.Data.DbModels.IdentityRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("IdentityRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("DotaApp.Data.DbModels.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DotaApp.Data.DbModels.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired();

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired();

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@dota.app",
                            FirstName = "Admin",
                            LastName = "Admin",
                            PasswordHash = new byte[] { 80, 233, 91, 86, 204, 203, 110, 253, 107, 175, 29, 63, 143, 125, 217, 68, 212, 227, 101, 231, 90, 182, 93, 191, 42, 53, 44, 195, 178, 45, 141, 112, 133, 78, 80, 235, 215, 241, 166, 103, 103, 135, 218, 143, 59, 45, 30, 197, 173, 106, 137, 118, 84, 220, 217, 251, 104, 107, 17, 91, 222, 35, 32, 217 },
                            PasswordSalt = new byte[] { 231, 179, 46, 141, 52, 55, 202, 93, 140, 212, 98, 141, 12, 49, 30, 8, 108, 195, 97, 37, 41, 175, 118, 174, 243, 116, 212, 147, 132, 57, 214, 59, 97, 223, 189, 111, 40, 70, 244, 16, 83, 164, 12, 40, 169, 249, 76, 101, 247, 223, 80, 54, 185, 155, 211, 126, 251, 61, 227, 187, 237, 120, 240, 243, 60, 127, 77, 164, 148, 238, 71, 217, 6, 188, 184, 215, 15, 167, 12, 95, 51, 56, 196, 45, 178, 30, 113, 90, 34, 114, 20, 253, 136, 190, 108, 62, 90, 58, 158, 244, 19, 69, 29, 163, 24, 17, 211, 196, 208, 201, 63, 203, 205, 140, 217, 85, 154, 121, 232, 36, 4, 22, 249, 217, 233, 155, 255, 184 },
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("DotaApp.Data.DbModels.UserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("DotaApp.Data.DbModels.Ability", b =>
                {
                    b.HasOne("DotaApp.Data.DbModels.Hero", "Hero")
                        .WithMany("Abilities")
                        .HasForeignKey("HeroId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DotaApp.Data.DbModels.AbilityAttribute", b =>
                {
                    b.HasOne("DotaApp.Data.DbModels.Ability", "Ability")
                        .WithMany("AbilityAttributes")
                        .HasForeignKey("AbilityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DotaApp.Data.DbModels.HeroRole", b =>
                {
                    b.HasOne("DotaApp.Data.DbModels.Hero", "Hero")
                        .WithMany("Roles")
                        .HasForeignKey("HeroId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DotaApp.Data.DbModels.Role", "Role")
                        .WithMany("Heroes")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DotaApp.Data.DbModels.UserRole", b =>
                {
                    b.HasOne("DotaApp.Data.DbModels.IdentityRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DotaApp.Data.DbModels.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
